name: Installer Workflow

run-name: Installer Workflow Test


on:
  workflow_dispatch:
  # push:
  # workflow_call:
  #   inputs:
  #     ref-name:
  #       required: true
  #       type: string
  #       default: ${{github.ref_name}}

env:
    MAVEN_SETTINGS: '/home/ec2-user/maven/.m2/settings.xml'
    BRANCH_NAME: ${{github.ref_name}}


jobs:
   initialize:
      name: Initialize
      runs-on: ubuntu-20.04
      outputs:
        IS_SNAPSHOT: ${{ contains(steps.get_current_version.outputs.POM_VERSION, '-SNAPSHOT')}}
        POM_VERSION: ${{ steps.get_current_version.outputs.POM_VERSION }}
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{inputs.ref-name}}
        
      - name: Extract Version
        id: get_current_version
        run: |
            echo "POM_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
  
      - name: Print Maven POM project version
        run: |
          echo "version = ${{ steps.get_current_version.outputs.POM_VERSION }}"

      - name: Print Status
        run: |
          echo "IS_SNAPSHOT --  ${{ contains(steps.get_current_version.outputs.POM_VERSION, '-SNAPSHOT')}}"
          echo "BRANCH_NAME -- ${{env.BRANCH_NAME}}"

          

   installer-test:
        strategy:
          matrix:
            os: [macos-13, macos-14, ubuntu-20.04, windows-2022]
        needs: initialize
        name: Test
        runs-on: ${{matrix.os}}
        steps:
          - name: Current OS
            run: echo "Current OS - ${{matrix.os}}"

          - name: Checkout Repository
            uses: actions/checkout@v4
            with:
              ref: ${{inputs.ref-name}}
      
          - name: Setup Java
            uses: actions/setup-java@v4
            with:
              distribution: 'zulu'
              java-version: '21'

          - name: IS_SNAPSHOT
            if: needs.initialize.outputs.IS_SNAPSHOT == 'true'
            uses: actions/github-script@v7
            id: snapshot_installers_vars
            with:
              result-encoding: json
              script: |
                  //Get MacOS Suffix

                  var macos_suffix = '';
                  if ("${{matrix.os}}".includes("macos")){
                    macos_suffix = ("${{matrix.os}}".includes("13")) ? "-intel" : "-m1"
                  }
                  
                  // Get OS Name
                  const NODE_NAME = "${{matrix.os}}".includes("ubuntu") ? "linux" : "${{matrix.os}}".split('-')[0] + macos_suffix;
                  

                  var snapshotBranchName = 'main'; 
                  if ("${{env.BRANCH_NAME}}" != "main"){
                    try {
                      snapshotBranchName = "${{env.BRANCH_NAME}}".split('/')[1].substring(0, Math.min("${{env.BRANCH_NAME}}".split('/')[1].length, 15))
                    } catch(ex) {
                      snapshotBranchName = "${{env.BRANCH_NAME}}".substring(0, Math.min("${{env.BRANCH_NAME}}".length, 15))
                    }
                  }
                  

                  const jpackageAppName = `Komet-SNAPSHOT-${NODE_NAME}-${snapshotBranchName}`;
                  const jpackageAppVersion = "${{needs.initialize.outputs.POM_VERSION}}".split('.')[0] + "." + "${{needs.initialize.outputs.POM_VERSION}}".split('.')[1] + "." + "${{github.run_number}}"
                  const mvnInstallerArgs = `-Pcreate-installer -D"jpackage.app.name"=${jpackageAppName} -D"jpackage.app.dest"=target/dist/snapshot-installer -D"jpackage.app.version"=${jpackageAppVersion}`


                  return {jpackageAppName, jpackageAppVersion, mvnInstallerArgs};

          - name: Build Installers (SNAPSHOT)
            if: needs.initialize.outputs.IS_SNAPSHOT == 'true'
            run: |
                 ./mvnw clean install ${{fromJson(steps.snapshot_installers_vars.outputs.result).mvnInstallerArgs}} -B -e -D"org.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener"=warn -D"maven.build.cache.enabled"=false -DskipTests -DskipITs
        
          - name: Upload SNAPSHOT Installers
            uses: actions/upload-artifact@v4
            if: needs.initialize.outputs.IS_SNAPSHOT == 'true'
            with:
             name: ${{fromJson(steps.snapshot_installers_vars.outputs.result).jpackageAppName}}-${{fromJson(steps.snapshot_installers_vars.outputs.result).jpackageAppVersion}}
             path: application/target/dist/snapshot-installer/*

          - name: Build Installers (Release)
            if: needs.initialize.outputs.IS_SNAPSHOT == 'false'
            run: |
              ./mvnw clean install -P create-installer -B -e -D"org.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener"=warn -D"maven.build.cache.enabled"=false -DskipTests -DskipITs

          - name: Publish Linux Installer Release to Nexus Repository Manager
            if: needs.initialize.outputs.IS_SNAPSHOT == 'false' && contains(matrix.os, 'ubuntu')
            run: |
              mvn deploy:deploy-file \
                  --batch-mode \
                  -e \
                  -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                  -Dmaven.build.cache.enabled=false \
                  -Dfile=\$(find application/target/dist/installer/ -name komet-${{needs.initialize.outputs.POM_VERSION}}*.rpm) \
                  -Durl=https://nexus.build.tinkarbuild.com/repository/maven-releases/ \
                  -DgroupId=${pomGroupId} \
                  -DartifactId=komet-installer-linux \
                  -Dversion=${{needs.initialize.outputs.POM_VERSION}} \
                  -Dclassifier=unsigned \
                  -Dtype=pkg \
                  -Dpackaging=pkg \
                  -DrepositoryId=titan-maven-releases

          - name: Publish Mac Intel Installer Release to Nexus Repository Manager
            if: needs.initialize.outputs.IS_SNAPSHOT == 'false' && contains(matrix.os, 'macos-13')
            run: |
              mvn deploy:deploy-file \
                  --batch-mode \
                  -e \
                  -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                  -Dmaven.build.cache.enabled=false \
                  -Dfile=\$(find application/target/dist/installer/ -name komet-${{needs.initialize.outputs.POM_VERSION}}*.pkg) \
                  -Durl=https://nexus.build.tinkarbuild.com/repository/maven-releases/ \
                  -DgroupId=${pomGroupId} \
                  -DartifactId=komet-installer-macintel \
                  -Dversion=${{needs.initialize.outputs.POM_VERSION}} \
                  -Dclassifier=unsigned \
                  -Dtype=pkg \
                  -Dpackaging=pkg \
                  -DrepositoryId=titan-maven-releases

          - name: Publish Mac M1 Installer Release to Nexus Repository Manager
            if: needs.initialize.outputs.IS_SNAPSHOT == 'false' && contains(matrix.os, 'macos-14')
            run: |
             mvn deploy:deploy-file \
                --batch-mode \
                -e \
                -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                -Dmaven.build.cache.enabled=false \
                -Dfile=\$(find application/target/dist/installer/ -name komet-${{needs.initialize.outputs.POM_VERSION}}*.pkg) \
                -Durl=https://nexus.build.tinkarbuild.com/repository/maven-releases/ \
                -DgroupId=${pomGroupId} \
                -DartifactId=komet-installer-macm1 \
                -Dversion=${{needs.initialize.outputs.POM_VERSION}} \
                -Dclassifier=unsigned \
                -Dtype=pkg \
                -Dpackaging=pkg \
                -DrepositoryId=titan-maven-releases

          - name: Publish Mac M1 Installer Release to Nexus Repository Manager
            if: needs.initialize.outputs.IS_SNAPSHOT == 'false' && contains(matrix.os, 'windows')
            run: |
              mvn deploy:deploy-file \
                  --batch-mode \
                  -e \
                  -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                  -Dmaven.build.cache.enabled=false \
                  -Dfile=application\\target\\dist\\installer\\Komet-${{needs.initialize.outputs.POM_VERSION}}.msi \
                  -Durl=https://nexus.build.tinkarbuild.com/repository/maven-releases/ \
                  -DgroupId=${pomGroupId} \
                  -DartifactId=komet-installer-windows \
                  -Dversion=${pomVersion} \
                  -Dclassifier=unsigned \
                  -Dtype=msi \
                  -Dpackaging=msi \
                  -DrepositoryId=titan-maven-releases

          - name: Upload Release Installers
            uses: actions/upload-artifact@v4
            if: needs.initialize.outputs.IS_SNAPSHOT == 'false'
            with:
              name: Komet-${{needs.initialize.outputs.POM_VERSION}}-${{matrix.os}}
              path: application/target/dist/installer/*